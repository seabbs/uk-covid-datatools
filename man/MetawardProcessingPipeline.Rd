% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MetawardProcessingPipeline.R
\name{MetawardProcessingPipeline}
\alias{MetawardProcessingPipeline}
\title{Process metawards output}
\description{
Process metawards output

Process metawards output
}
\section{Super class}{
\code{\link[ukcovidtools:PassthroughFilesystemCache]{ukcovidtools::PassthroughFilesystemCache}} -> \code{MetawardProcessingPipeline}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{MetawardProcessingPipeline$new()}}
\item \href{#method-readSpatialFile}{\code{MetawardProcessingPipeline$readSpatialFile()}}
\item \href{#method-loadAgeTimeMatrix}{\code{MetawardProcessingPipeline$loadAgeTimeMatrix()}}
\item \href{#method-applyAgeTimeMatrix}{\code{MetawardProcessingPipeline$applyAgeTimeMatrix()}}
\item \href{#method-loadDefaultAgeTimeMatrices}{\code{MetawardProcessingPipeline$loadDefaultAgeTimeMatrices()}}
\item \href{#method-tsParameterizedConvolution}{\code{MetawardProcessingPipeline$tsParameterizedConvolution()}}
\item \href{#method-tsDiscreteConvolution}{\code{MetawardProcessingPipeline$tsDiscreteConvolution()}}
\item \href{#method-bootstrapDistributions}{\code{MetawardProcessingPipeline$bootstrapDistributions()}}
\item \href{#method-tsBootstrapConvolution}{\code{MetawardProcessingPipeline$tsBootstrapConvolution()}}
\item \href{#method-summariseBootstrap}{\code{MetawardProcessingPipeline$summariseBootstrap()}}
\item \href{#method-clone}{\code{MetawardProcessingPipeline$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="PassthroughFilesystemCache" data-id="ageCatToFactor">}\href{../../ukcovidtools/html/PassthroughFilesystemCache.html#method-ageCatToFactor}{\code{ukcovidtools::PassthroughFilesystemCache$ageCatToFactor()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="PassthroughFilesystemCache" data-id="ageToAgeCat">}\href{../../ukcovidtools/html/PassthroughFilesystemCache.html#method-ageToAgeCat}{\code{ukcovidtools::PassthroughFilesystemCache$ageToAgeCat()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="PassthroughFilesystemCache" data-id="breakFromCats">}\href{../../ukcovidtools/html/PassthroughFilesystemCache.html#method-breakFromCats}{\code{ukcovidtools::PassthroughFilesystemCache$breakFromCats()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="PassthroughFilesystemCache" data-id="cutByAge">}\href{../../ukcovidtools/html/PassthroughFilesystemCache.html#method-cutByAge}{\code{ukcovidtools::PassthroughFilesystemCache$cutByAge()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="PassthroughFilesystemCache" data-id="download">}\href{../../ukcovidtools/html/PassthroughFilesystemCache.html#method-download}{\code{ukcovidtools::PassthroughFilesystemCache$download()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="PassthroughFilesystemCache" data-id="downloadAndUnzip">}\href{../../ukcovidtools/html/PassthroughFilesystemCache.html#method-downloadAndUnzip}{\code{ukcovidtools::PassthroughFilesystemCache$downloadAndUnzip()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="PassthroughFilesystemCache" data-id="downloadDaily">}\href{../../ukcovidtools/html/PassthroughFilesystemCache.html#method-downloadDaily}{\code{ukcovidtools::PassthroughFilesystemCache$downloadDaily()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="PassthroughFilesystemCache" data-id="getDaily">}\href{../../ukcovidtools/html/PassthroughFilesystemCache.html#method-getDaily}{\code{ukcovidtools::PassthroughFilesystemCache$getDaily()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="PassthroughFilesystemCache" data-id="getHashCached">}\href{../../ukcovidtools/html/PassthroughFilesystemCache.html#method-getHashCached}{\code{ukcovidtools::PassthroughFilesystemCache$getHashCached()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="PassthroughFilesystemCache" data-id="getSaved">}\href{../../ukcovidtools/html/PassthroughFilesystemCache.html#method-getSaved}{\code{ukcovidtools::PassthroughFilesystemCache$getSaved()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="PassthroughFilesystemCache" data-id="importTimeseries">}\href{../../ukcovidtools/html/PassthroughFilesystemCache.html#method-importTimeseries}{\code{ukcovidtools::PassthroughFilesystemCache$importTimeseries()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="PassthroughFilesystemCache" data-id="normaliseGender">}\href{../../ukcovidtools/html/PassthroughFilesystemCache.html#method-normaliseGender}{\code{ukcovidtools::PassthroughFilesystemCache$normaliseGender()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetawardProcessingPipeline$new(providerController, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-readSpatialFile"></a>}}
\subsection{Method \code{readSpatialFile()}}{
loads a spatial model file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetawardProcessingPipeline$readSpatialFile(fname, ignoreErrors = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fname}}{- a filename containing a ward based metaward model .dat file}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a data frame containing the simulation results
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-loadAgeTimeMatrix"></a>}}
\subsection{Method \code{loadAgeTimeMatrix()}}{
loads an age time matrix from a csv
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetawardProcessingPipeline$loadAgeTimeMatrix(url)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{url}}{- a url or filename for a csv file}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a data frame containing the filter
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-applyAgeTimeMatrix"></a>}}
\subsection{Method \code{applyAgeTimeMatrix()}}{
applies a age time matrix to a dataframe containing an incidence, an age category column, and a date column
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetawardProcessingPipeline$applyAgeTimeMatrix(
  inputDf,
  matrixDf,
  oldIncidenceVar = "incidence",
  newIncidenceVar = "incidence",
  oldDateVar = "date",
  newDateVar = "date",
  ageCatVar = "ageGroup"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{inputDf}}{- an input df containing an incidence col, a date col and a ageCategory col this must be grouped}

\item{\code{matrixDf}}{- a dataframe containing a sparse matrix of probabilities where age is labelled}

\item{\code{oldIncidenceVar}}{- the name of the input incidence col}

\item{\code{newIncidenceVar}}{- the name of the output incidence col}

\item{\code{oldDateVar}}{- the name of the input date column}

\item{\code{newDateVar}}{- the name of the output date column}

\item{\code{ageCatVar}}{- the age category variable}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Make sure your age categories are the saem as the matrix you are applying
The age time matrix can implement a delay, aggregate over time and or filter by age
}

\subsection{Returns}{
a data frame containing the simulation results
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-loadDefaultAgeTimeMatrices"></a>}}
\subsection{Method \code{loadDefaultAgeTimeMatrices()}}{
loads a ventilator demand matrices
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetawardProcessingPipeline$loadDefaultAgeTimeMatrices()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
a list of matrices
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tsParameterizedConvolution"></a>}}
\subsection{Method \code{tsParameterizedConvolution()}}{
applies a set of parameterised convolution functions groupwise to input data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetawardProcessingPipeline$tsParameterizedConvolution(
  groupedDf,
  distributionsDf,
  outputVar = "output",
  valueVar = "value",
  dateVar = "date",
  days = 30,
  timepoints = 0:days,
  padLeft = NA,
  padRight = NA
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{groupedDf}}{- an optionally grouped dataframe, containing at dateVar, and a valueVar to be colvolved}

\item{\code{distributionsDf}}{- a dataframe containing the same grouping columns as groupedDf plus "distribution", and relevant distribution parameter columns}

\item{\code{dateVar}}{-}

\item{\code{days}}{-}

\item{\code{timepoints}}{- the times to}

\item{\code{padLeft}}{- what can we assume about the run in to the current values? default NA.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a list of matrices
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tsDiscreteConvolution"></a>}}
\subsection{Method \code{tsDiscreteConvolution()}}{
applies a set of parameterised convolution functions groupwise to input data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetawardProcessingPipeline$tsDiscreteConvolution(
  groupedDf,
  discreteDistDf,
  outputVar = "output",
  valueVar = "value",
  dateVar = "date",
  pExpr = "prob",
  padLeft = NA,
  padRight = NA
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{groupedDf}}{- an optionally grouped dataframe, containing at dateVar, and a valueVar to be colvolved}

\item{\code{discreteDistDf}}{- a dataframe containing the same grouping columns as groupedDf plus "start", "end" and "prob" columns}

\item{\code{dateVar}}{-}

\item{\code{padLeft}}{- what can we assume about the run in to the current values? default NA.}

\item{\code{padRight}}{- what can we assume about the run in to the current values? default NA.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a list of matrices
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-bootstrapDistributions"></a>}}
\subsection{Method \code{bootstrapDistributions()}}{
calculates a set of bootstrap parameter distributions
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetawardProcessingPipeline$bootstrapDistributions(
  distributionDistDf,
  bootstraps = 100
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{distributionDistDf}}{- a grouped data frame containing the same columns as those grouped in groupedDf, plus "distribution" and columns for "<parameter>_mean","<parameter>_sd","<parameter>_min","<parameter>_max" e.g. shape_mean, shape_sd, shape_min, shape_max, rate_mean, rate_sd, rate_min, rate_max}

\item{\code{bootstraps}}{- number of bootstrap iterations}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a list of randomly selected bootstraps conforming to the specifications.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tsBootstrapConvolution"></a>}}
\subsection{Method \code{tsBootstrapConvolution()}}{
executes a convolution using bootstrapped parameterized distributions
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetawardProcessingPipeline$tsBootstrapConvolution(
  groupedDf,
  distributionDistDf,
  bootstraps = 100,
  outputVar = "output",
  valueVar = "value",
  dateVar = "date",
  days = 30,
  timepoints = 0:days,
  padLeft = NA,
  padRight = NA
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{distributionDistDf}}{- a grouped data frame containing the same columns as those grouped in groupedDf, plus "distribution" and  columns for "<parameter>_mean","<parameter>_sd","<parameter>_min","<parameter>_max" e.g. shape_mean, shape_sd, shape_min, shape_max, rate_mean, rate_sd, rate_min, rate_max}

\item{\code{bootstraps}}{- number of bootstrap iterations}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the full bootstrap result (i.e. not summarized) which can be futher convoluted (asd long as the number of bootstrap iterations are kept the same).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-summariseBootstrap"></a>}}
\subsection{Method \code{summariseBootstrap()}}{
summarise the result of a bootstrapped convolution using parameterized distributions
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetawardProcessingPipeline$summariseBootstrap(
  groupedDf,
  outputVars = vars(output),
  dateVar = "date"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{distributionDistDf}}{- a grouped data frame containing the same columns as those grouped in groupedDf, plus "distribution" and  columns for "<parameter>_mean","<parameter>_sd","<parameter>_min","<parameter>_max" e.g. shape_mean, shape_sd, shape_min, shape_max, rate_mean, rate_sd, rate_min, rate_max}

\item{\code{bootstraps}}{- number of bootstrap iterations}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the full bootstrap result (i.e. not summarized) which can be futher convoluted (asd long as the number of bootstrap iterations are kept the same).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MetawardProcessingPipeline$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
